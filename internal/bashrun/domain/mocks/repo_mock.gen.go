// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/PoorMercymain/bashrun/internal/bashrun/domain (interfaces: BashrunRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/PoorMercymain/bashrun/internal/bashrun/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockBashrunRepository is a mock of BashrunRepository interface.
type MockBashrunRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBashrunRepositoryMockRecorder
}

// MockBashrunRepositoryMockRecorder is the mock recorder for MockBashrunRepository.
type MockBashrunRepositoryMockRecorder struct {
	mock *MockBashrunRepository
}

// NewMockBashrunRepository creates a new mock instance.
func NewMockBashrunRepository(ctrl *gomock.Controller) *MockBashrunRepository {
	mock := &MockBashrunRepository{ctrl: ctrl}
	mock.recorder = &MockBashrunRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBashrunRepository) EXPECT() *MockBashrunRepositoryMockRecorder {
	return m.recorder
}

// CreateCommand mocks base method.
func (m *MockBashrunRepository) CreateCommand(arg0 context.Context, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCommand", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCommand indicates an expected call of CreateCommand.
func (mr *MockBashrunRepositoryMockRecorder) CreateCommand(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCommand", reflect.TypeOf((*MockBashrunRepository)(nil).CreateCommand), arg0, arg1)
}

// ListCommands mocks base method.
func (m *MockBashrunRepository) ListCommands(arg0 context.Context, arg1, arg2 int) ([]domain.CommandFromDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCommands", arg0, arg1, arg2)
	ret0, _ := ret[0].([]domain.CommandFromDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCommands indicates an expected call of ListCommands.
func (mr *MockBashrunRepositoryMockRecorder) ListCommands(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCommands", reflect.TypeOf((*MockBashrunRepository)(nil).ListCommands), arg0, arg1, arg2)
}

// Ping mocks base method.
func (m *MockBashrunRepository) Ping(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockBashrunRepositoryMockRecorder) Ping(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockBashrunRepository)(nil).Ping), arg0)
}

// ReadCommand mocks base method.
func (m *MockBashrunRepository) ReadCommand(arg0 context.Context, arg1 int) (domain.CommandFromDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadCommand", arg0, arg1)
	ret0, _ := ret[0].(domain.CommandFromDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadCommand indicates an expected call of ReadCommand.
func (mr *MockBashrunRepositoryMockRecorder) ReadCommand(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadCommand", reflect.TypeOf((*MockBashrunRepository)(nil).ReadCommand), arg0, arg1)
}

// ReadOutput mocks base method.
func (m *MockBashrunRepository) ReadOutput(arg0 context.Context, arg1 int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadOutput", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadOutput indicates an expected call of ReadOutput.
func (mr *MockBashrunRepositoryMockRecorder) ReadOutput(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadOutput", reflect.TypeOf((*MockBashrunRepository)(nil).ReadOutput), arg0, arg1)
}

// ReadPID mocks base method.
func (m *MockBashrunRepository) ReadPID(arg0 context.Context, arg1 int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadPID", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadPID indicates an expected call of ReadPID.
func (mr *MockBashrunRepositoryMockRecorder) ReadPID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadPID", reflect.TypeOf((*MockBashrunRepository)(nil).ReadPID), arg0, arg1)
}

// ReadStatus mocks base method.
func (m *MockBashrunRepository) ReadStatus(arg0 context.Context, arg1 int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadStatus", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadStatus indicates an expected call of ReadStatus.
func (mr *MockBashrunRepositoryMockRecorder) ReadStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadStatus", reflect.TypeOf((*MockBashrunRepository)(nil).ReadStatus), arg0, arg1)
}

// UpdateExitStatus mocks base method.
func (m *MockBashrunRepository) UpdateExitStatus(arg0 context.Context, arg1, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExitStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateExitStatus indicates an expected call of UpdateExitStatus.
func (mr *MockBashrunRepositoryMockRecorder) UpdateExitStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExitStatus", reflect.TypeOf((*MockBashrunRepository)(nil).UpdateExitStatus), arg0, arg1, arg2)
}

// UpdateOutput mocks base method.
func (m *MockBashrunRepository) UpdateOutput(arg0 context.Context, arg1 int, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOutput", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOutput indicates an expected call of UpdateOutput.
func (mr *MockBashrunRepositoryMockRecorder) UpdateOutput(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOutput", reflect.TypeOf((*MockBashrunRepository)(nil).UpdateOutput), arg0, arg1, arg2)
}

// UpdatePID mocks base method.
func (m *MockBashrunRepository) UpdatePID(arg0 context.Context, arg1, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePID", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePID indicates an expected call of UpdatePID.
func (mr *MockBashrunRepositoryMockRecorder) UpdatePID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePID", reflect.TypeOf((*MockBashrunRepository)(nil).UpdatePID), arg0, arg1, arg2)
}

// UpdateStatus mocks base method.
func (m *MockBashrunRepository) UpdateStatus(arg0 context.Context, arg1 int, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockBashrunRepositoryMockRecorder) UpdateStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockBashrunRepository)(nil).UpdateStatus), arg0, arg1, arg2)
}
